"""
Django settings for eas_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'a_default_fallback_secret_key_for_development_only')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == '1'

# Fernet Keys for django-fernet-encrypted-fields
# The first key is used for encryption, all keys are tried for decryption.
# Ensure FERNET_KEY_1 is set in your .env file
FERNET_KEYS = [
    os.environ.get('FERNET_KEY_1'),
]
if not FERNET_KEYS[0]:
    # This will raise an error during startup if the key is not set,
    # which is good for catching configuration issues early.
    raise ImproperlyConfigured("FERNET_KEY_1 environment variable not set. Please generate a key and add it to your .env file.")


ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    # Add your production domain(s) here
    # ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOST_PRIMARY'), '.yourdomain.com']
    pass # Configure for production later


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # Required by allauth
    'django_extensions',
    'rest_framework',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'encrypted_fields', # For django-fernet-encrypted-fields
    'eas_core',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'eas_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eas_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get('SQL_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.environ.get('SQL_DATABASE', 'eas_db'),
        'USER': os.environ.get('SQL_USER', 'eas_user'),
        'PASSWORD': os.environ.get('SQL_PASSWORD', 'eas_password'),
        'HOST': os.environ.get('SQL_HOST', 'db'), # 'db' is the service name in docker-compose
        'PORT': os.environ.get('SQL_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Celery Configuration
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://redis:6379/1")
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC' # Or your project's timezone
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60 # Example: 30 minutes

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s %(lineno)d %(message)s %(pathname)s %(process)d %(thread)d %(correlation_id)s %(task_id)s %(task_name)s',
        },
        'simple': { # A standard formatter for console, if needed for non-JSON output
            'format': '{levelname} {asctime} {module} {message}', # Using a slightly more verbose simple format
            'style': '{',
        },
    },
    'handlers': {
        # Define one primary console handler that uses the environment variable to switch formatters
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'json' if os.environ.get('DJANGO_LOG_FORMATTER') == 'json' else 'simple',
        },
    },
    'loggers': {
        'django': { # Django's own logs
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False, # Do not propagate to root if handled here
        },
        'django.request': { # Logs for requests, including 5XX errors
            'handlers': ['console'],
            'level': 'WARNING', # Or 'ERROR' for less verbosity
            'propagate': False,
        },
        'celery': { # Celery's own logs
            'handlers': ['console'],
            'level': os.getenv('CELERY_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'eas_backend': { # Your project's main logger (logs from eas_backend.*)
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'DEBUG'), # More verbose for your app in dev
            'propagate': False,
        },
        'eas_core': { # Your app's logger (logs from eas_core.*)
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'DEBUG'),
            'propagate': False,
        },
    },
    # Root logger - catches everything not caught by specific loggers if they had propagate: True
    # Or if a library logs to root directly.
    'root': {
        'handlers': ['console'],
        'level': 'WARNING', # Catchall for warnings and errors from other libraries
    }
}

# django-allauth Configuration
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend', # Needed for Django admin
    'allauth.account.auth_backends.AuthenticationBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # Optional
    ),
    # Add other DRF settings here if needed
}

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_HTTPONLY': False,
    'SESSION_LOGIN': False,
    'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer',
    'SOCIAL_LOGIN_PROVIDER_URLS': { # For dj_rest_auth social connect views
        'google': '/accounts/google/login/', # Ensure this matches the allauth URL pattern if allauth handles the actual login flow.
                                         # dj_rest_auth social views often act as wrappers or provide token exchange.
    },
    # 'JWT_AUTH_COOKIE': 'my-app-auth', # Example if using cookie for refresh token
    # 'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token', # Example for refresh token cookie
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True, # Requires rest_framework_simplejwt.token_blacklist in INSTALLED_APPS
    'UPDATE_LAST_LOGIN': True,
    # Add other JWT settings here if needed
    # e.g.
    # 'ALGORITHM': 'HS256',
    # 'SIGNING_KEY': SECRET_KEY, # Default, but can be explicit
    # 'VERIFYING_KEY': None,
    # 'AUDIENCE': None,
    # 'ISSUER': None,
    # 'JWK_URL': None,
    # 'LEEWAY': 0,

    # 'AUTH_HEADER_TYPES': ('Bearer',),
    # 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    # 'USER_ID_FIELD': 'id',
    # 'USER_ID_CLAIM': 'user_id',
    # 'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    # 'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    # 'TOKEN_TYPE_CLAIM': 'token_type',
    # 'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    # 'JTI_CLAIM': 'jti',

    # 'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    # 'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Example
    # 'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Example
}

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'openid',
            'https://www.googleapis.com/auth/gmail.send', # Crucial for sending emails
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline', # To get refresh tokens
        },
        'OAUTH_PKCE_ENABLED': True, # For enhanced security
        # Client ID and Secret will be configured by the user in Django Admin via SocialApp model
    }
}
# Optional: Allauth settings
ACCOUNT_EMAIL_VERIFICATION = os.environ.get('ACCOUNT_EMAIL_VERIFICATION', "none") # "mandatory" or "optional" for production
ACCOUNT_LOGIN_METHODS = ["email"]
# ACCOUNT_USERNAME_REQUIRED is removed as it's deprecated.
ACCOUNT_SIGNUP_FIELDS = [          # Fields on the signup form
    'email*',                      # Email is required
    'password1*',                  # Password is required
    'password2*'                   # Password confirmation is required
]
LOGIN_REDIRECT_URL = "/" # Or to a dashboard page
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
